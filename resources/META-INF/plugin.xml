<idea-plugin>
    <id>marcglasberg.HibernateInspectionsPlugin</id>
    <name>Hibernate Inspections</name>
    <version>1.7</version>
    <vendor email="marcglasberg@gmail.com">Marcelo Glasberg</vendor>

    <change-notes><![CDATA[
    If you wish to contribute and add more inspections,
    this plugin is in <a href="https://github.com/marcglasberg/HibernateInspectionsPlugin/tree/master">GitHub</a>.
    ]]>
    </change-notes>

    <!-- please see https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html for description -->
    <idea-version since-build="192.0"/>

    <!-- please see https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>
    <depends>com.intellij.modules.lang</depends>
    <!--    <depends>com.intellij.modules.java</depends>-->

    <extensions defaultExtensionNs="com.intellij">
        <inspectionToolProvider
                implementation="codeInspection.AccessingFieldFromAFinalMethodOfPersistedClass_Provider"/>
        <inspectionToolProvider
                implementation="codeInspection.PersistedClassIsFinal_Provider"/>
        <inspectionToolProvider
                implementation="codeInspection.EmbeddableSubclassesEmbeddable_Provider"/>
    </extensions>

    <actions>
        <!-- Add your actions here -->
    </actions>

    <description><![CDATA[

      ## Do I need this plugin?

      <br>

      Yes! Hibernate silently fails in certain situations, without telling you where and why it is
      failing. It may even do the wrong thing, without giving you any warnings.
      This leads to bugs which can be very difficult to track down and fix.<br>

      This plugin helps you find and fix these problems.

      <br>

      Under <b>Settings > Inspections > Hibernate inspections</b> it adds the following inspections:
      <ul>
        <li>Persisted class is final</li>
        <li>Final method of a persisted class uses direct field access</li>
        <li>Embeddable subclasses embeddable</li>
      </ul>

      <br>

      Created by <b>Marcelo Glasberg</b>
      <ul>
        <li>https://glasberg.dev</li>
        <li>https://github.com/marcglasberg</li>
        <li>https://www.linkedin.com/in/marcglasberg/</li>
        <li>https://stackoverflow.com/users/3411681/marcg</li>
      </ul>

      # Persisted class is final

This inspection reports when a persisted class is final
(persisted with Hibernate or similar, annotated with `@Entity`, `@MappedSuperclass`,
or `@Embeddable`).

From the Hibernate documentation:

<blockquote>
A central feature of Hibernate, proxies (lazy loading), depends upon the persistent class being either non-final,
or the implementation of an interface that declares all public methods.
You can persist final classes that do not implement an interface with Hibernate; you will not, however,
be able to use proxies for lazy association fetching which will ultimately limit your options for performance tuning.
</blockquote>

There are 3 ways to solve this:

* First is not to declare the class final.
* Second is to disable proxy generation:

<blockquote>
    <pre>@Entity @Proxy(lazy=false) public class Cat { ... }</pre>
</blockquote>
• Third is to tell Hibernate to use the interface instead (possible only when the final class implements a proper "full" interface):
<blockquote>
<pre>@Entity @Proxy(proxyClass=ICat.class) public class Cat implements ICat { ... }</pre>
</blockquote>

<b>Note:</b> This inspection only covers JPA/Hibernate <b>annotated</b> classes. It does <b>not</b>
check XML file mappings.

More information:

* <a href="https://docs.jboss.org/hibernate/orm/5.0/manual/en-US/html/ch04.html#persistent-classes-pojo-final-example-disable-proxies-ann">
  Hibernate Docs</a>

* <a href="http://stackoverflow.com/questions/6608222/does-a-final-method-prevent-hibernate-from-creating-a-proxy-for-such-an-entity">
  Stackoverflow question</a>

# Final method of a persisted class uses direct field access

This inspection reports when a final method of a persisted class (persisted with Hibernate or
similar, annotated with `@Entity`, `@MappedSuperclass`, or `@Embeddable`) uses direct field access.

If a class is persisted (with Hibernate or similar), and proxies are on, a final method that
directly accesses a field is ALWAYS a bug.

A final method does not prevent Hibernate from creating a proxy. Final methods that don't access
state are fine. Final methods that only access state through another method are also fine. But the
final method will fail (and may SILENTLY fail) if it uses a direct instance field, since field
values will not be initialized (will be null, zero or false). There are 3 ways to solve this:

<ul>
    <li>First is not to declare the method final.</li>
    <li>Second is not to directly access fields from final methods.</li>
    <li>Third is to disable proxy generation by setting lazy="false" (not recommended, for performance reasons).</li>
</ul>

<b>Note 1:</b> This inspection only covers JPA/Hibernate <b>annotated</b> classes. It does <b>
not</b> check XML file mappings.

<b>Note 2:</b> If you use <b>property access type strategy</b>, you may access the identifier
without forcing a proxy initialization. This isn’t true if you map the identifier property with <b>
direct field access type strategy</b>; Hibernate then doesn’t even know that the getId() method
exists. If you call it, the proxy has to be initialized. However, there is a way to avoid
initializing the proxy even when using direct field access strategy. Just mark the getId() method as
final, so that proxies cannot override it. Then, calling the method cannot run any proxy code, and
thus cannot initialize the proxy. The method itself checks if its instance is a proxy, and in this
case returns the id from the proxy. If the instance is the real object, it returns the id. This is a
valid use (maybe the only one?) of a final method that directly accesses state in a proxyable
persisted class. You should then suppress the warning generated by this inspection:

```
@SuppressWarnings ("AccessingFieldFromAFinalMethodOfPersistedClass")
public final long getId() {
    if (this instanceof HibernateProxy) {
      return (long)((HibernateProxy)this).getHibernateLazyInitializer().getIdentifier();
    }
    else {
      return id;
    }
}
```

<b>More information:</b>

<ul>
    <li><a href="https://youtrack.jetbrains.com/issue/IDEA-128132">Relevant IntelliJ IDEA bug report</a></li>
    <li><a href="http://stackoverflow.com/questions/6608222/does-a-final-method-prevent-hibernate-from-creating-a-proxy-for-such-an-entity">
        Stackoverflow question</a></li>
</ul>

# Embeddable subclasses embeddable

This inspection reports when an embeddable class subclasses another embeddable class (both annotated
with @Embeddable).

As of June 2017, component inheritance is not supported by Hibernate (this may change in the
future):

More information:

* <a href="https://hibernate.atlassian.net/browse/HHH-1152">Hibernate ORM: HHH-1152</a>
* <a href="https://hibernate.atlassian.net/browse/HHH-1910">Hibernate ORM: HHH-1910</a>
* <a href="https://hibernate.atlassian.net/browse/HHH-3455">Hibernate ORM: HHH-3455</a>
* <a href="https://stackoverflow.com/questions/29278249/hibernate-embeddable-class-which-extends-another-embeddable-class-properties">
  Stackoverflow question</a>
* <a href="https://stackoverflow.com/questions/917974/hibernate-embeddable-inheritance">
  Stackoverflow question</a>
* <a href="https://stackoverflow.com/questions/29788716/jpa-2-0-embedded-inherited-abstract-class">
  Stackoverflow question</a>

What happens when an embeddable class subclasses another embeddable class? Only the direct fields of
the exact subclass declared in the entity that contains the component (the embeddable object) will
be persisted. Also, the component creation may silently fail when loading the entity that contains
the component (Hibernate will set it to `null`).

    ]]></description>


</idea-plugin>
